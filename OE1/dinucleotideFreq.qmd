---
title: "Dinucleotide frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

## Frecuencia de dinucle√≥tidos

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}



## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(Rtsne)

```

You can add options to executable code like this

```{r}

# Function to count dinucleotides
count_dinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 2)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

# Read the multifasta files from the folder and calculate dinucleotide frequencies
calculate_dinucleotide_frequencies <- function(directory) {
  fasta_files <- list.files(path = directory, pattern = "^out_.*\\.fasta$", full.names = TRUE)
  results <- data.frame() # Initialize empty data frame for results

  # Iterate over each FASTA file in the folder
  for (fasta_file in fasta_files) {
    sequences <- read.fasta(fasta_file)
    ids <- names(sequences)
    # Base name of file
    base_name <- basename(fasta_file)
    # Regular expresion for extract diferents parts
    extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
    
    # Get dinucleotide frequencies for each sequence within a file
    for (i in seq_along(sequences)) {
      seq <- getSequence(sequences[[i]])
      freqs <- count_dinucleotides(seq)
      row <- c(File = extracted_names, ID = ids[i], freqs)  # Add file name

      # Convert the row to a data frame and join it to results
      row_df <- as.data.frame(t(row), stringsAsFactors = FALSE)
      results <- rbind(results, row_df)
    }
  }

  return(results)
}

# Define the working directory
directory <- "/home/usuario/Data_Rstudio/chop_genome"

# Run the function and get the dinucleotide frequency table
dinucleotide_table <- calculate_dinucleotide_frequencies(directory)

```

```{r}
library(reactable)

reactable(dinucleotide_table[,c(1, 3:18)], highlight = TRUE)

```

```{r}

# Convert dinucleotide columns to numeric
cols_to_convert <- c("aa", "tt", "ac", "gt", "ag", "ct", "ca", "tg", "cc", "gg", "ga", "tc", "at", "cg", "gc", "ta")
dinucleotide_table[cols_to_convert] <- lapply(dinucleotide_table[cols_to_convert], as.numeric)

# Now apply the operations to combine frequencies
combained_dinucleotide <- data.frame(
  "Genome" = dinucleotide_table[,"File"],
  "id" = dinucleotide_table[,"ID"],
  "aa.tt" = dinucleotide_table[,"aa"] + dinucleotide_table[,"tt"],
  "ac.gt" = dinucleotide_table[,"ac"] + dinucleotide_table[,"gt"],
  "ag.ct" = dinucleotide_table[,"ag"] + dinucleotide_table[,"ct"],
  "ca.tg" = dinucleotide_table[,"ca"] + dinucleotide_table[,"tg"],
  "cc.gg" = dinucleotide_table[,"cc"] + dinucleotide_table[,"gg"],
  "ga.tc" = dinucleotide_table[,"ga"] + dinucleotide_table[,"tc"],
  "at" = dinucleotide_table[,"at"],
  "cg" = dinucleotide_table[,"cg"],
  "gc" = dinucleotide_table[,"gc"],
  "ta" = dinucleotide_table[,"ta"]
)

reactable(combained_dinucleotide, highlight = TRUE)

```

```{r}

dinucleotide_data <- combained_dinucleotide[, -c(1, 2)]  # Exclude the first columns (File and ID)
dinucleotide_data <- as.data.frame(lapply(dinucleotide_data, as.numeric))  # Convert to numeric

# Perform PCA
pca_result <- prcomp(dinucleotide_data, scale. = TRUE)

# Obtain the PCA scores (principal components for each observation)
pca_scores <- as.data.frame(pca_result$x)

# Add the File and ID columns to the PCA results
pca_scores <- cbind(dinucleotide_table[, c("File", "ID")], pca_scores)

# Show the first PCA results
# print(head(pca_scores))
autoplot(pca_result, data = dinucleotide_table, colour = 'File', loadings = TRUE,
         loadings.label = TRUE, loadings.colour = 'grey64')

```